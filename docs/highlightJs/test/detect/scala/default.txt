case class Person(name: String, age: Int)

def absoluteValue(n: Int): Int =
  if (n < 0) -n else n

val hux = "hux"
def mux = "mux"
def qux: String = "qux"

type ξ[A] = (A, A)

trait Hist { lhs =>
  def ⊕(rhs: Hist): Hist
}

def gsum[A: Ring](as: Seq[A]): A =
  as.foldLeft(Ring[A].zero)(_ + _)

sealed trait Compass
case object North extends Compass
case object South extends Compass
case object East extends Compass
case object West extends Compass

trait Cake {
  type T;
  val things: Seq[T]

  abstract class Spindler

  def spindle(s: Spindler, ts: Seq[T], reversed: Boolean = false): Seq[T]
}

val colors = Map(
  "red" -> 0xFF0000,
  "turquoise" -> 0x00FFFF,
  "black" -> 0x000000,
  "orange" -> 0xFF8040,
  "brown" -> 0x804000)

lazy val ns = for {
  x <- 0 until 100
  y <- 0 until 100
} yield (x + y) * 33.33
